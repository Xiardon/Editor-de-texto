/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editorTexto;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.StringReader;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.undo.UndoManager;
import sun.font.FontFamily;

/**
 *
 * @author DAM2_MARCOS ALVAREZ
 */
public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        setLocationRelativeTo(null);
        areaTexto.setLineWrap(true); // para que al llegar al final del area de texto salte la linea.
        areaTexto.setWrapStyleWord(true); // para que cuando salte la linea no parta las palabras a la mitad
        areaTexto.requestFocus();
        archivo = null;
        um = new UndoManager();
        areaTexto.getDocument().addUndoableEditListener(um);
        fuenteDefecto = areaTexto.getFont();
        cambiosGuardados = false; // variable para comprobar si hemos guardado los cambios.
        botonCopiar.setEnabled(false);
        botonCortar.setEnabled(false);
        botonPegar.setEnabled(false);
        opcionGuardar.setEnabled(false);
        botonGuardar.setEnabled(false);
        opcionGuardarComo.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botonAbrir = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        botonCopiar = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        botonCortar = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        botonPegar = new javax.swing.JButton();
        botonDeshacer = new javax.swing.JButton();
        botonRehacer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        opcionAbrir = new javax.swing.JMenuItem();
        opcionGuardar = new javax.swing.JMenuItem();
        opcionGuardarComo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        opcionSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        opcionCopiar = new javax.swing.JMenuItem();
        opcionCortar = new javax.swing.JMenuItem();
        opcionPegar = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        opcionArial = new javax.swing.JMenuItem();
        opcionTahoma = new javax.swing.JMenuItem();
        opcionTimes = new javax.swing.JMenuItem();
        opcionPredeterminada = new javax.swing.JMenuItem();
        opcionPeque√±o = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        MenuTipo = new javax.swing.JMenu();
        opcionNegrita = new javax.swing.JCheckBoxMenuItem();
        opcionCursiva = new javax.swing.JCheckBoxMenuItem();
        jMenu5 = new javax.swing.JMenu();
        opcionDeshacer = new javax.swing.JMenuItem();
        opcionRehacer = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Editor de Texto por MAV");
        setIconImage(new ImageIcon("src\\editorTexto\\iconoseditor\\iconoEditor.png").getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                cerrarPrograma(evt);
            }
        });

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editorTexto/iconoseditor/if_open12_216680.png"))); // NOI18N
        botonAbrir.setToolTipText("Abrir un archivo");
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivo(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        botonCopiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editorTexto/iconoseditor/if_icon-ios7-copy_211733.png"))); // NOI18N
        botonCopiar.setToolTipText("Copiar");
        botonCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiar(evt);
            }
        });

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editorTexto/iconoseditor/if_save_2639912.png"))); // NOI18N
        botonGuardar.setToolTipText("Guardar cambios");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivo(evt);
            }
        });

        botonCortar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editorTexto/iconoseditor/if_content-cut_326596.png"))); // NOI18N
        botonCortar.setToolTipText("Cortar");
        botonCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cortar(evt);
            }
        });

        botonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editorTexto/iconoseditor/if_22_171495.png"))); // NOI18N
        botonSalir.setToolTipText("Salir del programa");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir(evt);
            }
        });

        botonPegar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editorTexto/iconoseditor/if_paste_1608782.png"))); // NOI18N
        botonPegar.setToolTipText("Pegar");
        botonPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegar(evt);
            }
        });

        botonDeshacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editorTexto/iconoseditor/if_arrow-back_216437.png"))); // NOI18N
        botonDeshacer.setToolTipText("Deshacer cambios");
        botonDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deshacer(evt);
            }
        });

        botonRehacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/editorTexto/iconoseditor/if_icon-forward_211666.png"))); // NOI18N
        botonRehacer.setToolTipText("Rehacer cambios");
        botonRehacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rehacer(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCortar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonPegar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(botonDeshacer, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonRehacer, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonDeshacer, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonRehacer, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonCortar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonPegar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        areaTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                escribir(evt);
            }
        });
        jScrollPane2.setViewportView(areaTexto);

        jMenu1.setText("Archivo");
        jMenu1.setToolTipText("Abrir un archivo nuevo");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarComo(evt);
            }
        });

        opcionAbrir.setText("Abrir");
        opcionAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivo(evt);
            }
        });
        jMenu1.add(opcionAbrir);

        opcionGuardar.setText("Guardar");
        opcionGuardar.setToolTipText("Guardar cambios");
        opcionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivo(evt);
            }
        });
        jMenu1.add(opcionGuardar);

        opcionGuardarComo.setText("Guardar Como");
        opcionGuardarComo.setToolTipText("Guardar en un archivo nuevo");
        opcionGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(opcionGuardarComo);
        jMenu1.add(jSeparator1);

        opcionSalir.setText("Salir");
        opcionSalir.setToolTipText("Salir del programa");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir(evt);
            }
        });
        jMenu1.add(opcionSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edici√≥n");

        opcionCopiar.setText("Copiar");
        opcionCopiar.setToolTipText("Copiar");
        opcionCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiar(evt);
            }
        });
        jMenu2.add(opcionCopiar);

        opcionCortar.setText("Cortar");
        opcionCortar.setToolTipText("Cortar");
        opcionCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cortar(evt);
            }
        });
        jMenu2.add(opcionCortar);

        opcionPegar.setText("Pegar");
        opcionPegar.setToolTipText("Pegar");
        opcionPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegar(evt);
            }
        });
        jMenu2.add(opcionPegar);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Opciones");

        jMenu4.setText("Fuente");
        jMenu4.setToolTipText("Seleccionar una nueva fuente");

        opcionArial.setText("Arial");
        opcionArial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuente(evt);
            }
        });
        jMenu4.add(opcionArial);

        opcionTahoma.setText("Tahoma");
        opcionTahoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuente(evt);
            }
        });
        jMenu4.add(opcionTahoma);

        opcionTimes.setText("Times");
        opcionTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuente(evt);
            }
        });
        jMenu4.add(opcionTimes);

        opcionPredeterminada.setText("Predeterminada");
        opcionPredeterminada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuente(evt);
            }
        });
        jMenu4.add(opcionPredeterminada);

        jMenu3.add(jMenu4);

        opcionPeque√±o.setText("Tama√±o");
        opcionPeque√±o.setToolTipText("Cambiar el tama√±o de la fuente");
        opcionPeque√±o.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tama√±o(evt);
            }
        });

        jMenuItem11.setText("Peque√±o");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tama√±o(evt);
            }
        });
        opcionPeque√±o.add(jMenuItem11);

        jMenuItem12.setText("Mediano");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tama√±o(evt);
            }
        });
        opcionPeque√±o.add(jMenuItem12);

        jMenuItem13.setText("Grande");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tama√±o(evt);
            }
        });
        opcionPeque√±o.add(jMenuItem13);

        jMenu3.add(opcionPeque√±o);

        MenuTipo.setText("Tipo");
        MenuTipo.setToolTipText("Cambiar el estilo de la fuente");

        opcionNegrita.setText("Negrita");
        opcionNegrita.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tipo(evt);
            }
        });
        MenuTipo.add(opcionNegrita);

        opcionCursiva.setText("Cursiva");
        opcionCursiva.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tipo(evt);
            }
        });
        opcionCursiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCursivaActionPerformed(evt);
            }
        });
        MenuTipo.add(opcionCursiva);

        jMenu3.add(MenuTipo);

        jMenuBar1.add(jMenu3);

        jMenu5.setText("Corregir");
        jMenu5.setToolTipText("");

        opcionDeshacer.setMnemonic('q');
        opcionDeshacer.setText("Deshacer");
        opcionDeshacer.setToolTipText("Permite deshacer cambios");
        opcionDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deshacer(evt);
            }
        });
        jMenu5.add(opcionDeshacer);

        opcionRehacer.setText("Rehacer");
        opcionRehacer.setToolTipText("Permite rehacer los cambios");
        opcionRehacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rehacer(evt);
            }
        });
        jMenu5.add(opcionRehacer);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fuente(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fuente
        // TODO add your handling code here:
        JMenuItem menu = (JMenuItem) evt.getSource();
        String opcion = menu.getText();
        switch (opcion) {
            case "Arial":
                areaTexto.setFont(new Font("Arial", fuenteDefecto.getStyle(), fuenteDefecto.getSize()));
                break;
            case "Tahoma":
                areaTexto.setFont(new Font("Tahoma", fuenteDefecto.getStyle(), fuenteDefecto.getSize()));
                break;
            case "Times":
                areaTexto.setFont(new Font("Times New Roman", fuenteDefecto.getStyle(), fuenteDefecto.getSize()));
                break;
            case "Predeterminada":
                areaTexto.setFont(fuenteDefecto);
                break;
        }
    }//GEN-LAST:event_fuente

    private void pegar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pegar
        // TODO add your handling code here:
        areaTexto.paste();
    }//GEN-LAST:event_pegar

    private void cortar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cortar
        // TODO add your handling code here:
        areaTexto.cut();
    }//GEN-LAST:event_cortar

    private void copiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiar
        // TODO add your handling code here:
        areaTexto.copy();
    }//GEN-LAST:event_copiar

    /**
     * Este metodo es para abrir archivos
     *
     * @param evt
     */
    private void abrirArchivo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivo
        // TODO add your handling code here:
        if (cambiosGuardados == true || areaTexto.getText().length() == 0) {//Comprobamos que los cambios esten guardados antes de abrir.
            JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY); //Solo permiteremos seleccionar archivos.
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos .txt, html. o bat", "txt", "html", "bat"); //Creamos un filtro con las extensiones.
            fc.setFileFilter(filtro); //A√±adimos el flitro al Chooser.
            fc.setAcceptAllFileFilterUsed(false);
            int opcion = fc.showOpenDialog(this);
            if (opcion == JFileChooser.APPROVE_OPTION) { //Comprobamos si la opcion seleccionada es aceptar.
                try {
                    archivo = fc.getSelectedFile();
                    BufferedReader bf = new BufferedReader(new FileReader(archivo));
                    String linea = bf.readLine();
                    while (linea != null) {
                        areaTexto.append(linea + "\n");
                        linea = bf.readLine();
                    }
                    bf.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Se ha producido un error");
                }
            }
        } else {
            guardarArchivo(evt);
        }
        if (archivo != null) {
            a√±adirNombreAlTitulo();
        }


    }//GEN-LAST:event_abrirArchivo

    private void deshacer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deshacer
        // TODO add your handling code here:
        if (um.canUndo()) {
            um.undo();
        }
    }//GEN-LAST:event_deshacer

    private void rehacer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rehacer
        // TODO add your handling code here:
        if (um.canRedo()) {
            um.redo();
        }
    }//GEN-LAST:event_rehacer

    public void guardarComo() {
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Texto plano .txt", "txt"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Pagina web .html", "html"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Arcivo por lotes .bat", "bat"));
        fc.setFileFilter(fc.getChoosableFileFilters()[0]);
        fc.setAcceptAllFileFilterUsed(false);
        int seleccion = fc.showSaveDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            try {
                archivo = fc.getSelectedFile();
                if (archivo.getName().endsWith(".txt") || archivo.getName().endsWith(".html") || archivo.getName().endsWith(".bat")) {
                    archivo.createNewFile();
                    guardar();
                } else {
                    //guarda el archivo con el nombre seleccionado y le a√±ade la extension que seleccionemos en el filechooser y lo crea.
                    archivo = new File(fc.getSelectedFile().getCanonicalPath() + "." + ((FileNameExtensionFilter) fc.getFileFilter()).getExtensions()[0]);
                    archivo.createNewFile();
                    guardar();

                }

            } catch (Exception e) {
            }
        }

    }

    private void guardarArchivo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivo
        // TODO add your handling code here:
        int opcion = JOptionPane.showConfirmDialog(null, "¬øQuiere guardar los cambios?", "Guardar cambios", JOptionPane.YES_NO_OPTION);
        if (opcion == 0) {
            if (archivo != null) {
                opcion = JOptionPane.showConfirmDialog(null, "¬øQuiere sobreescribir el archivo actual?", "Aviso!", JOptionPane.YES_NO_OPTION);
                if (opcion == 0) {
                    guardar();
                }
            } else {
                guardarComo();

            }
        }

    }//GEN-LAST:event_guardarArchivo

    /**
     * Metdo para salir, nos comprueba si hemos guardado los cambios antes de
     * confirmar.
     */
    private void exit() {
        int opcion = JOptionPane.showConfirmDialog(null, "¬øDesea salir?", "Salir", JOptionPane.YES_NO_OPTION);
        ActionEvent evt = null;
        if (opcion == 0) {
            if (areaTexto.getText().length() == 0) { //comprobamos si tenemos algo escrito en el area de texto.
                System.exit(0);
            } else if (cambiosGuardados == false) {
                guardarArchivo(evt);
                System.exit(0);
            } else {
                System.exit(0);
            }
        } else {

        }
    }
    private void salir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_salir

    private void tama√±o(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tama√±o
        // TODO add your handling code here:
        Font fuente = areaTexto.getFont(); //guardamos la fuente actual para utilizar sus valores.
        JMenuItem menu = (JMenuItem) evt.getSource(); // 
        String opcion = menu.getText();
        switch (opcion) {
            case "Peque√±o":
                areaTexto.setFont(new Font(fuente.getName(), fuente.getStyle(), 12));
                break;
            case "Mediano":
                areaTexto.setFont(new Font(fuente.getName(), fuente.getStyle(), 18));
                break;
            case "Grande":
                areaTexto.setFont(new Font(fuente.getName(), fuente.getStyle(), 26));
                break;
        }
    }//GEN-LAST:event_tama√±o

    private void tipo(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tipo
        // TODO add your handling code here:
        Font fuente = areaTexto.getFont();
        if (opcionNegrita.isSelected() && opcionCursiva.isSelected()) {
            areaTexto.setFont(new Font(fuente.getName(), Font.BOLD + Font.ITALIC, fuente.getSize()));
        } else if (opcionNegrita.isSelected()) {
            areaTexto.setFont(new Font(fuente.getName(), Font.BOLD, fuente.getSize()));
        } else if (opcionCursiva.isSelected()) {
            areaTexto.setFont(new Font(fuente.getName(), Font.ITALIC, fuente.getSize()));
        } else {
            areaTexto.setFont(new Font(fuente.getName(), Font.PLAIN, fuente.getSize()));
        }

    }//GEN-LAST:event_tipo

    private void opcionCursivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCursivaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_opcionCursivaActionPerformed

    private void cerrarPrograma(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_cerrarPrograma
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_cerrarPrograma

    private void opcionGuardarComo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarComo
        // TODO add your handling code here:

    }//GEN-LAST:event_opcionGuardarComo

    private void opcionGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarComoActionPerformed
        // TODO add your handling code here:
        guardarComo();
    }//GEN-LAST:event_opcionGuardarComoActionPerformed

    /**
     * Con este metodo comprobamos si hemos escrito algo en el area de texto y
     * en funcion de ello activamos o no diferentes opciones de nuestro editor
     *
     * @param evt
     */
    private void escribir(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_escribir
        // TODO add your handling code here:
        cambiosGuardados = false; //Cada vez que cambiamos algo en el area de texto ponemos a false la variable.
        if (areaTexto.getText().length() > 0) { // Comprobamos el area del texto para activar o desacivar opciones.
            botonCopiar.setEnabled(true);
            botonCortar.setEnabled(true);
            botonPegar.setEnabled(true);
            opcionGuardar.setEnabled(true);
            botonGuardar.setEnabled(true);
            opcionGuardarComo.setEnabled(true);
        } else {
            botonCopiar.setEnabled(false);
            botonCortar.setEnabled(false);
            botonPegar.setEnabled(false);
            opcionGuardar.setEnabled(false);
            botonGuardar.setEnabled(false);
            opcionGuardarComo.setEnabled(false);
        }
    }//GEN-LAST:event_escribir

    /**
     * Metodo para exribir lo que hay en el area de texto en el archivo.
     */
    private void guardar() {
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(archivo)); //Flujo de datos hacia el archivo a escirbir
            String texto = areaTexto.getText(); //Pasamos todo el area de texto a un string
            String[] lineas = texto.split("\n"); //Creamos un array de strings partiendo el texto por los saltos de linea.
            for (int i = 0; i < lineas.length; i++) {
                bw.write(lineas[i]);
                bw.newLine();
            }
            bw.close();
            cambiosGuardados = true;
            a√±adirNombreAlTitulo();
        } catch (Exception e) {
        }
    }

    /**
     * Metodo para a√±adir el nombre del archivo a la etiqueta del programa
     */
    private void a√±adirNombreAlTitulo() {
        setTitle(this.getTitle() + " - " + archivo.getName());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuTipo;
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonCopiar;
    private javax.swing.JButton botonCortar;
    private javax.swing.JButton botonDeshacer;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonPegar;
    private javax.swing.JButton botonRehacer;
    private javax.swing.JButton botonSalir;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenuItem opcionAbrir;
    private javax.swing.JMenuItem opcionArial;
    private javax.swing.JMenuItem opcionCopiar;
    private javax.swing.JMenuItem opcionCortar;
    private javax.swing.JCheckBoxMenuItem opcionCursiva;
    private javax.swing.JMenuItem opcionDeshacer;
    private javax.swing.JMenuItem opcionGuardar;
    private javax.swing.JMenuItem opcionGuardarComo;
    private javax.swing.JCheckBoxMenuItem opcionNegrita;
    private javax.swing.JMenuItem opcionPegar;
    private javax.swing.JMenu opcionPeque√±o;
    private javax.swing.JMenuItem opcionPredeterminada;
    private javax.swing.JMenuItem opcionRehacer;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JMenuItem opcionTahoma;
    private javax.swing.JMenuItem opcionTimes;
    // End of variables declaration//GEN-END:variables
    private File archivo;
    private UndoManager um;
    private Font fuenteDefecto;
    boolean cambiosGuardados;
}
